
#version 430
#define NUM_THREADS_X 8
#define NUM_THREADS_Y 8
#define NUM_THREADS_Z 8
#define NUM_THREADS_TOTAL (NUM_THREADS_X * NUM_THREADS_Y * NUM_THREADS_Z)
//const ivec3 NUM_THREADS = ivec3(NUM_THREADS_X,NUM_THREADS_Y,NUM_THREADS_Z);  // Used for internal loop size
layout(local_size_x = NUM_THREADS_X, local_size_y = NUM_THREADS_Y, local_size_z = NUM_THREADS_Z) in;
shared vec3[NUM_THREADS_TOTAL*12] sharedVertices; //vertices written by each thread
shared int[NUM_THREADS_TOTAL] sharedNumVertices;

layout(std430, binding = 0) buffer Result {
    float field[];
};


layout(std430, binding = 1) buffer CounterBuffer {
    uint appendCounter;
};
//layout(binding = 1, offset = 0) uniform atomic_uint appendCounter;  // Atomic counter for indexing
layout(std430, binding = 2) buffer AppendBuffer {  // Buffer for appended values
    vec3 triangles[];
};

uniform ivec3 gridSize;
uniform vec3 minVal;
uniform vec3 maxVal;

const ivec2[12] EdgeVertexIndices = ivec2[12](
    ivec2(0, 1),
    ivec2(1, 3),
    ivec2(3, 2),
    ivec2(2, 0),
    ivec2(4, 5),
    ivec2(5, 7),
    ivec2(7, 6),
    ivec2(6, 4),
    ivec2(0, 4),
    ivec2(1, 5),
    ivec2(3, 7),
    ivec2(2, 6)
);

const ivec3[8] vertexoffset = ivec3[8](
    ivec3(0, 0, 0),
    ivec3(1, 0, 0),
    ivec3(0, 1, 0),
    ivec3(1, 1, 0),
    ivec3(0, 0, 1),
    ivec3(1, 0, 1),
    ivec3(0, 1, 1),
    ivec3(1, 1, 1)
);

// Lookup Tables for Marching Cubes
const int marchingcubestable[256][13] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,9,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,8,1,1,8,9,-1,-1,-1,-1,-1,-1,-1},
{2,11,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,0,11,11,0,2,-1,-1,-1,-1,-1,-1,-1},
{3,2,11,1,0,9,-1,-1,-1,-1,-1,-1,-1},
{11,1,2,11,9,1,11,8,9,-1,-1,-1,-1},
{1,10,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,8,2,1,10,-1,-1,-1,-1,-1,-1,-1},
{10,2,9,9,2,0,-1,-1,-1,-1,-1,-1,-1},
{8,2,3,8,10,2,8,9,10,-1,-1,-1,-1},
{11,3,10,10,3,1,-1,-1,-1,-1,-1,-1,-1},
{10,0,1,10,8,0,10,11,8,-1,-1,-1,-1},
{9,3,0,9,11,3,9,10,11,-1,-1,-1,-1},
{8,9,11,11,9,10,-1,-1,-1,-1,-1,-1,-1},
{4,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,4,3,3,4,0,-1,-1,-1,-1,-1,-1,-1},
{4,8,7,0,9,1,-1,-1,-1,-1,-1,-1,-1},
{1,4,9,1,7,4,1,3,7,-1,-1,-1,-1},
{8,7,4,11,3,2,-1,-1,-1,-1,-1,-1,-1},
{4,11,7,4,2,11,4,0,2,-1,-1,-1,-1},
{0,9,1,8,7,4,11,3,2,-1,-1,-1,-1},
{7,4,11,11,4,2,2,4,9,2,9,1,-1},
{4,8,7,2,1,10,-1,-1,-1,-1,-1,-1,-1},
{7,4,3,3,4,0,10,2,1,-1,-1,-1,-1},
{10,2,9,9,2,0,7,4,8,-1,-1,-1,-1},
{10,2,3,10,3,4,3,7,4,9,10,4,-1},
{1,10,3,3,10,11,4,8,7,-1,-1,-1,-1},
{10,11,1,11,7,4,1,11,4,1,4,0,-1},
{7,4,8,9,3,0,9,11,3,9,10,11,-1},
{7,4,11,4,9,11,9,10,11,-1,-1,-1,-1},
{9,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,4,5,8,0,3,-1,-1,-1,-1,-1,-1,-1},
{4,5,0,0,5,1,-1,-1,-1,-1,-1,-1,-1},
{5,8,4,5,3,8,5,1,3,-1,-1,-1,-1},
{9,4,5,11,3,2,-1,-1,-1,-1,-1,-1,-1},
{2,11,0,0,11,8,5,9,4,-1,-1,-1,-1},
{4,5,0,0,5,1,11,3,2,-1,-1,-1,-1},
{5,1,4,1,2,11,4,1,11,4,11,8,-1},
{1,10,2,5,9,4,-1,-1,-1,-1,-1,-1,-1},
{9,4,5,0,3,8,2,1,10,-1,-1,-1,-1},
{2,5,10,2,4,5,2,0,4,-1,-1,-1,-1},
{10,2,5,5,2,4,4,2,3,4,3,8,-1},
{11,3,10,10,3,1,4,5,9,-1,-1,-1,-1},
{4,5,9,10,0,1,10,8,0,10,11,8,-1},
{11,3,0,11,0,5,0,4,5,10,11,5,-1},
{4,5,8,5,10,8,10,11,8,-1,-1,-1,-1},
{8,7,9,9,7,5,-1,-1,-1,-1,-1,-1,-1},
{3,9,0,3,5,9,3,7,5,-1,-1,-1,-1},
{7,0,8,7,1,0,7,5,1,-1,-1,-1,-1},
{7,5,3,3,5,1,-1,-1,-1,-1,-1,-1,-1},
{5,9,7,7,9,8,2,11,3,-1,-1,-1,-1},
{2,11,7,2,7,9,7,5,9,0,2,9,-1},
{2,11,3,7,0,8,7,1,0,7,5,1,-1},
{2,11,1,11,7,1,7,5,1,-1,-1,-1,-1},
{8,7,9,9,7,5,2,1,10,-1,-1,-1,-1},
{10,2,1,3,9,0,3,5,9,3,7,5,-1},
{7,5,8,5,10,2,8,5,2,8,2,0,-1},
{10,2,5,2,3,5,3,7,5,-1,-1,-1,-1},
{8,7,5,8,5,9,11,3,10,3,1,10,-1},
{5,11,7,10,11,5,1,9,0,-1,-1,-1,-1},
{11,5,10,7,5,11,8,3,0,-1,-1,-1,-1},
{5,11,7,10,11,5,-1,-1,-1,-1,-1,-1,-1},
{6,7,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,11,6,3,8,0,-1,-1,-1,-1,-1,-1,-1},
{6,7,11,0,9,1,-1,-1,-1,-1,-1,-1,-1},
{9,1,8,8,1,3,6,7,11,-1,-1,-1,-1},
{3,2,7,7,2,6,-1,-1,-1,-1,-1,-1,-1},
{0,7,8,0,6,7,0,2,6,-1,-1,-1,-1},
{6,7,2,2,7,3,9,1,0,-1,-1,-1,-1},
{6,7,8,6,8,1,8,9,1,2,6,1,-1},
{11,6,7,10,2,1,-1,-1,-1,-1,-1,-1,-1},
{3,8,0,11,6,7,10,2,1,-1,-1,-1,-1},
{0,9,2,2,9,10,7,11,6,-1,-1,-1,-1},
{6,7,11,8,2,3,8,10,2,8,9,10,-1},
{7,10,6,7,1,10,7,3,1,-1,-1,-1,-1},
{8,0,7,7,0,6,6,0,1,6,1,10,-1},
{7,3,6,3,0,9,6,3,9,6,9,10,-1},
{6,7,10,7,8,10,8,9,10,-1,-1,-1,-1},
{11,6,8,8,6,4,-1,-1,-1,-1,-1,-1,-1},
{6,3,11,6,0,3,6,4,0,-1,-1,-1,-1},
{11,6,8,8,6,4,1,0,9,-1,-1,-1,-1},
{1,3,9,3,11,6,9,3,6,9,6,4,-1},
{2,8,3,2,4,8,2,6,4,-1,-1,-1,-1},
{4,0,6,6,0,2,-1,-1,-1,-1,-1,-1,-1},
{9,1,0,2,8,3,2,4,8,2,6,4,-1},
{9,1,4,1,2,4,2,6,4,-1,-1,-1,-1},
{4,8,6,6,8,11,1,10,2,-1,-1,-1,-1},
{1,10,2,6,3,11,6,0,3,6,4,0,-1},
{11,6,4,11,4,8,10,2,9,2,0,9,-1},
{10,4,9,6,4,10,11,2,3,-1,-1,-1,-1},
{4,8,3,4,3,10,3,1,10,6,4,10,-1},
{1,10,0,10,6,0,6,4,0,-1,-1,-1,-1},
{4,10,6,9,10,4,0,8,3,-1,-1,-1,-1},
{4,10,6,9,10,4,-1,-1,-1,-1,-1,-1,-1},
{6,7,11,4,5,9,-1,-1,-1,-1,-1,-1,-1},
{4,5,9,7,11,6,3,8,0,-1,-1,-1,-1},
{1,0,5,5,0,4,11,6,7,-1,-1,-1,-1},
{11,6,7,5,8,4,5,3,8,5,1,3,-1},
{3,2,7,7,2,6,9,4,5,-1,-1,-1,-1},
{5,9,4,0,7,8,0,6,7,0,2,6,-1},
{3,2,6,3,6,7,1,0,5,0,4,5,-1},
{6,1,2,5,1,6,4,7,8,-1,-1,-1,-1},
{10,2,1,6,7,11,4,5,9,-1,-1,-1,-1},
{0,3,8,4,5,9,11,6,7,10,2,1,-1},
{7,11,6,2,5,10,2,4,5,2,0,4,-1},
{8,4,7,5,10,6,3,11,2,-1,-1,-1,-1},
{9,4,5,7,10,6,7,1,10,7,3,1,-1},
{10,6,5,7,8,4,1,9,0,-1,-1,-1,-1},
{4,3,0,7,3,4,6,5,10,-1,-1,-1,-1},
{10,6,5,8,4,7,-1,-1,-1,-1,-1,-1,-1},
{9,6,5,9,11,6,9,8,11,-1,-1,-1,-1},
{11,6,3,3,6,0,0,6,5,0,5,9,-1},
{11,6,5,11,5,0,5,1,0,8,11,0,-1},
{11,6,3,6,5,3,5,1,3,-1,-1,-1,-1},
{9,8,5,8,3,2,5,8,2,5,2,6,-1},
{5,9,6,9,0,6,0,2,6,-1,-1,-1,-1},
{1,6,5,2,6,1,3,0,8,-1,-1,-1,-1},
{1,6,5,2,6,1,-1,-1,-1,-1,-1,-1,-1},
{2,1,10,9,6,5,9,11,6,9,8,11,-1},
{9,0,1,3,11,2,5,10,6,-1,-1,-1,-1},
{11,0,8,2,0,11,10,6,5,-1,-1,-1,-1},
{3,11,2,5,10,6,-1,-1,-1,-1,-1,-1,-1},
{1,8,3,9,8,1,5,10,6,-1,-1,-1,-1},
{6,5,10,0,1,9,-1,-1,-1,-1,-1,-1,-1},
{8,3,0,5,10,6,-1,-1,-1,-1,-1,-1,-1},
{6,5,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,8,6,10,5,-1,-1,-1,-1,-1,-1,-1},
{10,5,6,9,1,0,-1,-1,-1,-1,-1,-1,-1},
{3,8,1,1,8,9,6,10,5,-1,-1,-1,-1},
{2,11,3,6,10,5,-1,-1,-1,-1,-1,-1,-1},
{8,0,11,11,0,2,5,6,10,-1,-1,-1,-1},
{1,0,9,2,11,3,6,10,5,-1,-1,-1,-1},
{5,6,10,11,1,2,11,9,1,11,8,9,-1},
{5,6,1,1,6,2,-1,-1,-1,-1,-1,-1,-1},
{5,6,1,1,6,2,8,0,3,-1,-1,-1,-1},
{6,9,5,6,0,9,6,2,0,-1,-1,-1,-1},
{6,2,5,2,3,8,5,2,8,5,8,9,-1},
{3,6,11,3,5,6,3,1,5,-1,-1,-1,-1},
{8,0,1,8,1,6,1,5,6,11,8,6,-1},
{11,3,6,6,3,5,5,3,0,5,0,9,-1},
{5,6,9,6,11,9,11,8,9,-1,-1,-1,-1},
{5,6,10,7,4,8,-1,-1,-1,-1,-1,-1,-1},
{0,3,4,4,3,7,10,5,6,-1,-1,-1,-1},
{5,6,10,4,8,7,0,9,1,-1,-1,-1,-1},
{6,10,5,1,4,9,1,7,4,1,3,7,-1},
{7,4,8,6,10,5,2,11,3,-1,-1,-1,-1},
{10,5,6,4,11,7,4,2,11,4,0,2,-1},
{4,8,7,6,10,5,3,2,11,1,0,9,-1},
{1,2,10,11,7,6,9,5,4,-1,-1,-1,-1},
{2,1,6,6,1,5,8,7,4,-1,-1,-1,-1},
{0,3,7,0,7,4,2,1,6,1,5,6,-1},
{8,7,4,6,9,5,6,0,9,6,2,0,-1},
{7,2,3,6,2,7,5,4,9,-1,-1,-1,-1},
{4,8,7,3,6,11,3,5,6,3,1,5,-1},
{5,0,1,4,0,5,7,6,11,-1,-1,-1,-1},
{9,5,4,6,11,7,0,8,3,-1,-1,-1,-1},
{11,7,6,9,5,4,-1,-1,-1,-1,-1,-1,-1},
{6,10,4,4,10,9,-1,-1,-1,-1,-1,-1,-1},
{6,10,4,4,10,9,3,8,0,-1,-1,-1,-1},
{0,10,1,0,6,10,0,4,6,-1,-1,-1,-1},
{6,10,1,6,1,8,1,3,8,4,6,8,-1},
{9,4,10,10,4,6,3,2,11,-1,-1,-1,-1},
{2,11,8,2,8,0,6,10,4,10,9,4,-1},
{11,3,2,0,10,1,0,6,10,0,4,6,-1},
{6,8,4,11,8,6,2,10,1,-1,-1,-1,-1},
{4,1,9,4,2,1,4,6,2,-1,-1,-1,-1},
{3,8,0,4,1,9,4,2,1,4,6,2,-1},
{6,2,4,4,2,0,-1,-1,-1,-1,-1,-1,-1},
{3,8,2,8,4,2,4,6,2,-1,-1,-1,-1},
{4,6,9,6,11,3,9,6,3,9,3,1,-1},
{8,6,11,4,6,8,9,0,1,-1,-1,-1,-1},
{11,3,6,3,0,6,0,4,6,-1,-1,-1,-1},
{8,6,11,4,6,8,-1,-1,-1,-1,-1,-1,-1},
{10,7,6,10,8,7,10,9,8,-1,-1,-1,-1},
{3,7,0,7,6,10,0,7,10,0,10,9,-1},
{6,10,7,7,10,8,8,10,1,8,1,0,-1},
{6,10,7,10,1,7,1,3,7,-1,-1,-1,-1},
{3,2,11,10,7,6,10,8,7,10,9,8,-1},
{2,9,0,10,9,2,6,11,7,-1,-1,-1,-1},
{0,8,3,7,6,11,1,2,10,-1,-1,-1,-1},
{7,6,11,1,2,10,-1,-1,-1,-1,-1,-1,-1},
{2,1,9,2,9,7,9,8,7,6,2,7,-1},
{2,7,6,3,7,2,0,1,9,-1,-1,-1,-1},
{8,7,0,7,6,0,6,2,0,-1,-1,-1,-1},
{7,2,3,6,2,7,-1,-1,-1,-1,-1,-1,-1},
{8,1,9,3,1,8,11,7,6,-1,-1,-1,-1},
{11,7,6,1,9,0,-1,-1,-1,-1,-1,-1,-1},
{6,11,7,0,8,3,-1,-1,-1,-1,-1,-1,-1},
{11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,11,5,5,11,10,-1,-1,-1,-1,-1,-1,-1},
{10,5,11,11,5,7,0,3,8,-1,-1,-1,-1},
{7,11,5,5,11,10,0,9,1,-1,-1,-1,-1},
{7,11,10,7,10,5,3,8,1,8,9,1,-1},
{5,2,10,5,3,2,5,7,3,-1,-1,-1,-1},
{5,7,10,7,8,0,10,7,0,10,0,2,-1},
{0,9,1,5,2,10,5,3,2,5,7,3,-1},
{9,7,8,5,7,9,10,1,2,-1,-1,-1,-1},
{1,11,2,1,7,11,1,5,7,-1,-1,-1,-1},
{8,0,3,1,11,2,1,7,11,1,5,7,-1},
{7,11,2,7,2,9,2,0,9,5,7,9,-1},
{7,9,5,8,9,7,3,11,2,-1,-1,-1,-1},
{3,1,7,7,1,5,-1,-1,-1,-1,-1,-1,-1},
{8,0,7,0,1,7,1,5,7,-1,-1,-1,-1},
{0,9,3,9,5,3,5,7,3,-1,-1,-1,-1},
{9,7,8,5,7,9,-1,-1,-1,-1,-1,-1,-1},
{8,5,4,8,10,5,8,11,10,-1,-1,-1,-1},
{0,3,11,0,11,5,11,10,5,4,0,5,-1},
{1,0,9,8,5,4,8,10,5,8,11,10,-1},
{10,3,11,1,3,10,9,5,4,-1,-1,-1,-1},
{3,2,8,8,2,4,4,2,10,4,10,5,-1},
{10,5,2,5,4,2,4,0,2,-1,-1,-1,-1},
{5,4,9,8,3,0,10,1,2,-1,-1,-1,-1},
{2,10,1,4,9,5,-1,-1,-1,-1,-1,-1,-1},
{8,11,4,11,2,1,4,11,1,4,1,5,-1},
{0,5,4,1,5,0,2,3,11,-1,-1,-1,-1},
{0,11,2,8,11,0,4,9,5,-1,-1,-1,-1},
{5,4,9,2,3,11,-1,-1,-1,-1,-1,-1,-1},
{4,8,5,8,3,5,3,1,5,-1,-1,-1,-1},
{0,5,4,1,5,0,-1,-1,-1,-1,-1,-1,-1},
{5,4,9,3,0,8,-1,-1,-1,-1,-1,-1,-1},
{5,4,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,4,7,11,9,4,11,10,9,-1,-1,-1,-1},
{0,3,8,11,4,7,11,9,4,11,10,9,-1},
{11,10,7,10,1,0,7,10,0,7,0,4,-1},
{3,10,1,11,10,3,7,8,4,-1,-1,-1,-1},
{3,2,10,3,10,4,10,9,4,7,3,4,-1},
{9,2,10,0,2,9,8,4,7,-1,-1,-1,-1},
{3,4,7,0,4,3,1,2,10,-1,-1,-1,-1},
{7,8,4,10,1,2,-1,-1,-1,-1,-1,-1,-1},
{7,11,4,4,11,9,9,11,2,9,2,1,-1},
{1,9,0,4,7,8,2,3,11,-1,-1,-1,-1},
{7,11,4,11,2,4,2,0,4,-1,-1,-1,-1},
{4,7,8,2,3,11,-1,-1,-1,-1,-1,-1,-1},
{9,4,1,4,7,1,7,3,1,-1,-1,-1,-1},
{7,8,4,1,9,0,-1,-1,-1,-1,-1,-1,-1},
{3,4,7,0,4,3,-1,-1,-1,-1,-1,-1,-1},
{7,8,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,10,8,8,10,9,-1,-1,-1,-1,-1,-1,-1},
{0,3,9,3,11,9,11,10,9,-1,-1,-1,-1},
{1,0,10,0,8,10,8,11,10,-1,-1,-1,-1},
{10,3,11,1,3,10,-1,-1,-1,-1,-1,-1,-1},
{3,2,8,2,10,8,10,9,8,-1,-1,-1,-1},
{9,2,10,0,2,9,-1,-1,-1,-1,-1,-1,-1},
{8,3,0,10,1,2,-1,-1,-1,-1,-1,-1,-1},
{2,10,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,1,11,1,9,11,9,8,11,-1,-1,-1,-1},
{11,2,3,9,0,1,-1,-1,-1,-1,-1,-1,-1},
{11,0,8,2,0,11,-1,-1,-1,-1,-1,-1,-1},
{3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,8,3,9,8,1,-1,-1,-1,-1,-1,-1,-1},
{1,9,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}
};

int idot(ivec3 a, ivec3 b) {
    return a.x * b.x + a.y * b.y + a.z * b.z;
}

void main() {
    ivec3 pos0 = ivec3(gl_GlobalInvocationID.xyz);
    if(pos0.x>=gridSize.x-1||pos0.y>=gridSize.y-1||pos0.z>=gridSize.z-1)return;


    ivec3 delta = ivec3(1, gridSize.x, gridSize.y * gridSize.x);
    float vertvalues[8];
    //vec3 vertpos[8];

    float isoValue = 0;

    int tableindex = 0;
    for (int i = 0; i < 8; i++) {
        ivec3 pos=vertexoffset[i]+pos0;
        vertvalues[i] = field[idot(pos, delta)];

        if (vertvalues[i] >= isoValue) {
            tableindex |= (1 << i);  // Set the bit for the i-th corner
        }
    }
    if(tableindex==0 || tableindex==255)return;




    // Calculate the number of triangles this thread will generate
    const int[] tablerow=marchingcubestable[tableindex];

    int numVertices = 0;
    for (int i = 0; tablerow[i] != -1; i += 3) {
        numVertices+=3;
    }

    num

    // Reserve space for triangles
    //int baseIdx = int(atomicAdd(appendCounter, uint(numVertices)));
    //int baseIdx = int(atomicAdd(appendCounter, uint(numVertices)));
    //int baseIdx = idot(pos0, delta)*12;


    // Append triangles
    for (int i = 0; i<numVertices; i++) {
    //for (int i = 0; tablerow[i] != -1; i++) {
    //int i=0;
        int edgeindex = tablerow[i];
        ivec2 edge = EdgeVertexIndices[edgeindex];
        float t = (isoValue - vertvalues[edge.x]) / (vertvalues[edge.y] - vertvalues[edge.x]);

        vec3 vertex=mix(vertexoffset[edge.x], vertexoffset[edge.y], t);
        vertex=mix(minVal, maxVal,(vertex+pos0)/ vec3(gridSize - 1));
        sharedVertices[gl_LocalInvocationIndex+i] = vertex;
    }
    sharedNumVertices[gl_LocalInvocationIndex]=numVertices;

}
'], GL_COMPUTE_SHADER)
PS C:\Users\internet\source\repos\openglplayground> 